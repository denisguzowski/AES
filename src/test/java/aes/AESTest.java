package aes;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AESTest {

    @Test
    void testAddRoundKey() {
        short[] input = new short[]{
                0x32, 0x88, 0x31, 0xe0,
                0x43, 0x5a, 0x31, 0x37,
                0xf6, 0x30, 0x98, 0x07,
                0xa8, 0x8d, 0xa2, 0x34
        };
        short[] key = new short[]{
                0x2b, 0x28, 0xab, 0x09,
                0x7e, 0xae, 0xf7, 0xcf,
                0x15, 0xd2, 0x15, 0x4f,
                0x16, 0xa6, 0x88, 0x3c
        };

        short[] expectedOutput = new short[]{
                0x19, 0xa0, 0x9a, 0xe9,
                0x3d, 0xf4, 0xc6, 0xf8,
                0xe3, 0xe2, 0x8d, 0x48,
                0xbe, 0x2b, 0x2a, 0x08
        };

        short[] afterAddRoundKey = AES.addRoundKey(input, key);

        assertArrayEquals(expectedOutput, afterAddRoundKey);
    }

    @Test
    void testSubBytes() {
        short[] input = new short[]{
                0x19, 0xa0, 0x9a, 0xe9,
                0x3d, 0xf4, 0xc6, 0xf8,
                0xe3, 0xe2, 0x8d, 0x48,
                0xbe, 0x2b, 0x2a, 0x08
        };

        short[] expectedOutput = new short[]{
                0xd4, 0xe0, 0xb8, 0x1e,
                0x27, 0xbf, 0xb4, 0x41,
                0x11, 0x98, 0x5d, 0x52,
                0xae, 0xf1, 0xe5, 0x30
        };

        short[] afterSubBytes = AES.subBytes(input);

        assertArrayEquals(expectedOutput, afterSubBytes);
    }

    @Test
    void testShiftRows() {
        short[] input = new short[]{
                0xd4, 0xe0, 0xb8, 0x1e,
                0x27, 0xbf, 0xb4, 0x41,
                0x11, 0x98, 0x5d, 0x52,
                0xae, 0xf1, 0xe5, 0x30
        };

        short[] expectedOutput = new short[]{
                0xd4, 0xe0, 0xb8, 0x1e,
                0xbf, 0xb4, 0x41, 0x27,
                0x5d, 0x52, 0x11, 0x98,
                0x30, 0xae, 0xf1, 0xe5
        };

        short[] afterShiftRows = AES.shiftRows(input);

        assertArrayEquals(expectedOutput, afterShiftRows);
    }

    @Test
    void testGMul() {
        short a = 0x57;
        short b = 0x13;
        short expected = 0xFE;

        short c = AES.GMul(a, b);

        assertEquals(expected, c);
    }

    @Test
    void testMixColumns() {
        short[] input = new short[]{
                0xd4, 0xe0, 0xb8, 0x1e,
                0xbf, 0xb4, 0x41, 0x27,
                0x5d, 0x52, 0x11, 0x98,
                0x30, 0xae, 0xf1, 0xe5
        };

        short[] expectedOutput = new short[]{
                0x04, 0xe0, 0x48, 0x28,
                0x66, 0xcb, 0xf8, 0x06,
                0x81, 0x19, 0xd3, 0x26,
                0xe5, 0x9a, 0x7a, 0x4c
        };

        short[] afterMixColumns = AES.mixColumns(input);

        assertArrayEquals(expectedOutput, afterMixColumns);
    }

    @Test
    void testEncrypt() {
        short[] input = new short[]{
                0x32, 0x88, 0x31, 0xe0,
                0x43, 0x5a, 0x31, 0x37,
                0xf6, 0x30, 0x98, 0x07,
                0xa8, 0x8d, 0xa2, 0x34
        };
        short[] key = new short[]{
                0x2b, 0x28, 0xab, 0x09,
                0x7e, 0xae, 0xf7, 0xcf,
                0x15, 0xd2, 0x15, 0x4f,
                0x16, 0xa6, 0x88, 0x3c
        };

        short[] expectedOutput = new short[]{
                0x39, 0x02, 0xdc, 0x19,
                0x25, 0xdc, 0x11, 0x6a,
                0x84, 0x09, 0x85, 0x0b,
                0x1d, 0xfb, 0x97, 0x32
        };

        short[] cypherText = AES.encrypt(input, key);

        assertArrayEquals(expectedOutput, cypherText);
    }

    @Test
    void testDecrypt() {
        short[] cypherText = new short[]{
                0x39, 0x02, 0xdc, 0x19,
                0x25, 0xdc, 0x11, 0x6a,
                0x84, 0x09, 0x85, 0x0b,
                0x1d, 0xfb, 0x97, 0x32
        };
        short[] key = new short[]{
                0x2b, 0x28, 0xab, 0x09,
                0x7e, 0xae, 0xf7, 0xcf,
                0x15, 0xd2, 0x15, 0x4f,
                0x16, 0xa6, 0x88, 0x3c
        };

        short[] expectedOutput = new short[]{
                0x32, 0x88, 0x31, 0xe0,
                0x43, 0x5a, 0x31, 0x37,
                0xf6, 0x30, 0x98, 0x07,
                0xa8, 0x8d, 0xa2, 0x34
        };

        short[] text = AES.decrypt(cypherText, key);

        assertArrayEquals(expectedOutput, text);
    }

    @Test
    void testInvShiftRows() {
        short[] input = new short[]{
                0xbd, 0xf2, 0x0b, 0x8b,
                0xb5, 0x61, 0x10, 0x6e,
                0x21, 0xb6, 0x7c, 0x77,
                0x89, 0x3d, 0x9e, 0x6e
        };

        short[] expectedOutput = new short[]{
                0xbd, 0xf2, 0x0b, 0x8b,
                0x6e, 0xb5, 0x61, 0x10,
                0x7c, 0x77, 0x21, 0xb6,
                0x3d, 0x9e, 0x6e, 0x89
        };

        assertArrayEquals(expectedOutput, AES.invShiftRows(input));
    }

    @Test
    void testInvSubBytes() {
        short[] input = new short[]{
                0x7a, 0x89, 0x2b, 0x3d,
                0xd5, 0xef, 0xca, 0x9f,
                0xfd, 0x4e, 0x10, 0xf5,
                0xa7, 0x27, 0x0b, 0x9f
        };

        short[] expectedOutput = new short[]{
                0xbd, 0xf2, 0x0b, 0x8b,
                0xb5, 0x61, 0x10, 0x6e,
                0x21, 0xb6, 0x7c, 0x77,
                0x89, 0x3d, 0x9e, 0x6e
        };

        assertArrayEquals(expectedOutput, AES.invSubBytes(input));
    }

    @Test
    void testInvMixColumns() {
        short[] input = new short[]{
                0xbd, 0xf2, 0x0b, 0x8b,
                0x6e, 0xb5, 0x61, 0x10,
                0x7c, 0x77, 0x21, 0xb6,
                0x3d, 0x9e, 0x6e, 0x89
        };

        short[] expectedOutput = new short[]{
                0x47, 0xf7, 0x61, 0xa1,
                0x73, 0x2f, 0xcb, 0xe6,
                0xb9, 0x35, 0x01, 0xcf,
                0x1f, 0x43, 0x8e, 0x2c
        };

        assertArrayEquals(expectedOutput, AES.invMixColumns(input));
    }
}